import type { Metadata } from "next";
import "./globals.css";
import { Noto_Sans_Arabic } from "next/font/google";
import { Header } from "@/components/header"
import { Providers } from "@/components/providers"
import { ErrorBoundary } from "@/components/error-boundary"
import { Suspense } from "react"
import { LoadingSpinner } from "@/components/ui/loading-spinner";

const notoArabic = Noto_Sans_Arabic({
  weight: ["400", "500", "700"],
  subsets: ["arabic"],
});

async function getOptions() {
  try {
    const res = await fetch(`${process.env.NEXT_PUBLIC_APP_URL}/api/fetch-options`, {
      cache: 'no-store'
    })
    if (!res.ok) {
      throw new Error(`Failed to fetch options: ${res.statusText}`)
    }
    const data = await res.json()
    return { options: data, error: null }
  } catch (err) {
    console.error('Error fetching options:', err)
    return { options: null, error: err instanceof Error ? err : new Error('Unknown error occurred') }
  }
}

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ar" dir="rtl">
      <body className={`${notoArabic.className} antialiased`}>
        <ErrorBoundary>
          <Suspense fallback={<LoadingSpinner className="fixed inset-0 flex items-center justify-center" />}>
            <OptionsWrapper>{children}</OptionsWrapper>
          </Suspense>
        </ErrorBoundary>
      </body>
    </html>
  );
}

async function OptionsWrapper({ children }: { children: React.ReactNode }) {
  const { options, error } = await getOptions()
  
  return (
    <Providers options={options} isLoading={!options && !error} error={error}>
      <Header />
      <main className="pt-32">
        {children}
      </main>
    </Providers>
  )
}
